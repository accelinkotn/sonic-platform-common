#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class periph_type(object):
    CHASSIS = 0
    LINECARD = 1
    CU = 2
    FAN = 3
    PSU = 4
    UNKNOWN = 5

    _VALUES_TO_NAMES = {
        0: "CHASSIS",
        1: "LINECARD",
        2: "CU",
        3: "FAN",
        4: "PSU",
        5: "UNKNOWN",
    }

    _NAMES_TO_VALUES = {
        "CHASSIS": 0,
        "LINECARD": 1,
        "CU": 2,
        "FAN": 3,
        "PSU": 4,
        "UNKNOWN": 5,
    }


class led_type(object):
    CU = 0
    FAN = 1
    PSU = 2
    UNKNOWN = 3

    _VALUES_TO_NAMES = {
        0: "CU",
        1: "FAN",
        2: "PSU",
        3: "UNKNOWN",
    }

    _NAMES_TO_VALUES = {
        "CU": 0,
        "FAN": 1,
        "PSU": 2,
        "UNKNOWN": 3,
    }


class fpga_type(object):
    UP = 0
    DOWN = 1

    _VALUES_TO_NAMES = {
        0: "UP",
        1: "DOWN",
    }

    _NAMES_TO_VALUES = {
        "UP": 0,
        "DOWN": 1,
    }


class led_color(object):
    RED = 0
    GREEN = 1
    YELLOW = 2
    ORANGE = 3
    NONE = 4

    _VALUES_TO_NAMES = {
        0: "RED",
        1: "GREEN",
        2: "YELLOW",
        3: "ORANGE",
        4: "NONE",
    }

    _NAMES_TO_VALUES = {
        "RED": 0,
        "GREEN": 1,
        "YELLOW": 2,
        "ORANGE": 3,
        "NONE": 4,
    }


class led_flash_type(object):
    RED_YELLOW_GREEN = 0
    NONE = 1

    _VALUES_TO_NAMES = {
        0: "RED_YELLOW_GREEN",
        1: "NONE",
    }

    _NAMES_TO_VALUES = {
        "RED_YELLOW_GREEN": 0,
        "NONE": 1,
    }


class linecard_type(object):
    P230C = 0
    E100C = 1
    E110C = 2
    E120C = 3

    _VALUES_TO_NAMES = {
        0: "P230C",
        1: "E100C",
        2: "E110C",
        3: "E120C",
    }

    _NAMES_TO_VALUES = {
        "P230C": 0,
        "E100C": 1,
        "E110C": 2,
        "E120C": 3,
    }


class reboot_type(object):
    POWER = 0
    COLD = 1
    SOFT = 2
    ABNORMAL = 3
    DOG = 4
    BUTTON = 5

    _VALUES_TO_NAMES = {
        0: "POWER",
        1: "COLD",
        2: "SOFT",
        3: "ABNORMAL",
        4: "DOG",
        5: "BUTTON",
    }

    _NAMES_TO_VALUES = {
        "POWER": 0,
        "COLD": 1,
        "SOFT": 2,
        "ABNORMAL": 3,
        "DOG": 4,
        "BUTTON": 5,
    }


class power_ctl_type(object):
    OFF = 0
    ON = 1

    _VALUES_TO_NAMES = {
        0: "OFF",
        1: "ON",
    }

    _NAMES_TO_VALUES = {
        "OFF": 0,
        "ON": 1,
    }


class system_version(object):
    """
    Attributes:
     - fpgaup
     - fpgadown
     - pcb
     - bom
     - devmgr
     - ucd90120

    """


    def __init__(self, fpgaup=None, fpgadown=None, pcb=None, bom=None, devmgr=None, ucd90120=None,):
        self.fpgaup = fpgaup
        self.fpgadown = fpgadown
        self.pcb = pcb
        self.bom = bom
        self.devmgr = devmgr
        self.ucd90120 = ucd90120

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fpgaup = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fpgadown = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pcb = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.bom = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.devmgr = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.ucd90120 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('system_version')
        if self.fpgaup is not None:
            oprot.writeFieldBegin('fpgaup', TType.STRING, 1)
            oprot.writeString(self.fpgaup.encode('utf-8') if sys.version_info[0] == 2 else self.fpgaup)
            oprot.writeFieldEnd()
        if self.fpgadown is not None:
            oprot.writeFieldBegin('fpgadown', TType.STRING, 2)
            oprot.writeString(self.fpgadown.encode('utf-8') if sys.version_info[0] == 2 else self.fpgadown)
            oprot.writeFieldEnd()
        if self.pcb is not None:
            oprot.writeFieldBegin('pcb', TType.STRING, 3)
            oprot.writeString(self.pcb.encode('utf-8') if sys.version_info[0] == 2 else self.pcb)
            oprot.writeFieldEnd()
        if self.bom is not None:
            oprot.writeFieldBegin('bom', TType.STRING, 4)
            oprot.writeString(self.bom.encode('utf-8') if sys.version_info[0] == 2 else self.bom)
            oprot.writeFieldEnd()
        if self.devmgr is not None:
            oprot.writeFieldBegin('devmgr', TType.STRING, 5)
            oprot.writeString(self.devmgr.encode('utf-8') if sys.version_info[0] == 2 else self.devmgr)
            oprot.writeFieldEnd()
        if self.ucd90120 is not None:
            oprot.writeFieldBegin('ucd90120', TType.STRING, 6)
            oprot.writeString(self.ucd90120.encode('utf-8') if sys.version_info[0] == 2 else self.ucd90120)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class psu_info(object):
    """
    Attributes:
     - abs
     - ambient_temp
     - primary_temp
     - secondary_temp
     - vout
     - vin
     - iout
     - iin
     - pout
     - pin
     - fan
     - capacity

    """


    def __init__(self, abs=None, ambient_temp=None, primary_temp=None, secondary_temp=None, vout=None, vin=None, iout=None, iin=None, pout=None, pin=None, fan=None, capacity=None,):
        self.abs = abs
        self.ambient_temp = ambient_temp
        self.primary_temp = primary_temp
        self.secondary_temp = secondary_temp
        self.vout = vout
        self.vin = vin
        self.iout = iout
        self.iin = iin
        self.pout = pout
        self.pin = pin
        self.fan = fan
        self.capacity = capacity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.abs = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.ambient_temp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.primary_temp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.secondary_temp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.vout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.vin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.iout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.iin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.pout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.pin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.fan = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.capacity = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('psu_info')
        if self.abs is not None:
            oprot.writeFieldBegin('abs', TType.I32, 1)
            oprot.writeI32(self.abs)
            oprot.writeFieldEnd()
        if self.ambient_temp is not None:
            oprot.writeFieldBegin('ambient_temp', TType.I32, 2)
            oprot.writeI32(self.ambient_temp)
            oprot.writeFieldEnd()
        if self.primary_temp is not None:
            oprot.writeFieldBegin('primary_temp', TType.I32, 3)
            oprot.writeI32(self.primary_temp)
            oprot.writeFieldEnd()
        if self.secondary_temp is not None:
            oprot.writeFieldBegin('secondary_temp', TType.I32, 4)
            oprot.writeI32(self.secondary_temp)
            oprot.writeFieldEnd()
        if self.vout is not None:
            oprot.writeFieldBegin('vout', TType.I32, 5)
            oprot.writeI32(self.vout)
            oprot.writeFieldEnd()
        if self.vin is not None:
            oprot.writeFieldBegin('vin', TType.I32, 6)
            oprot.writeI32(self.vin)
            oprot.writeFieldEnd()
        if self.iout is not None:
            oprot.writeFieldBegin('iout', TType.I32, 7)
            oprot.writeI32(self.iout)
            oprot.writeFieldEnd()
        if self.iin is not None:
            oprot.writeFieldBegin('iin', TType.I32, 8)
            oprot.writeI32(self.iin)
            oprot.writeFieldEnd()
        if self.pout is not None:
            oprot.writeFieldBegin('pout', TType.I32, 9)
            oprot.writeI32(self.pout)
            oprot.writeFieldEnd()
        if self.pin is not None:
            oprot.writeFieldBegin('pin', TType.I32, 10)
            oprot.writeI32(self.pin)
            oprot.writeFieldEnd()
        if self.fan is not None:
            oprot.writeFieldBegin('fan', TType.I32, 11)
            oprot.writeI32(self.fan)
            oprot.writeFieldEnd()
        if self.capacity is not None:
            oprot.writeFieldBegin('capacity', TType.I32, 12)
            oprot.writeI32(self.capacity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class periph_eeprom(object):
    """
    Attributes:
     - type
     - model_name
     - pn
     - sn
     - label
     - hw_ver
     - sw_ver
     - mfg_date
     - mac_addr

    """


    def __init__(self, type=None, model_name=None, pn=None, sn=None, label=None, hw_ver=None, sw_ver=None, mfg_date=None, mac_addr=None,):
        self.type = type
        self.model_name = model_name
        self.pn = pn
        self.sn = sn
        self.label = label
        self.hw_ver = hw_ver
        self.sw_ver = sw_ver
        self.mfg_date = mfg_date
        self.mac_addr = mac_addr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.model_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pn = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sn = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.label = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.hw_ver = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.sw_ver = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.mfg_date = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.mac_addr = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('periph_eeprom')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.model_name is not None:
            oprot.writeFieldBegin('model_name', TType.STRING, 2)
            oprot.writeString(self.model_name.encode('utf-8') if sys.version_info[0] == 2 else self.model_name)
            oprot.writeFieldEnd()
        if self.pn is not None:
            oprot.writeFieldBegin('pn', TType.STRING, 3)
            oprot.writeString(self.pn.encode('utf-8') if sys.version_info[0] == 2 else self.pn)
            oprot.writeFieldEnd()
        if self.sn is not None:
            oprot.writeFieldBegin('sn', TType.STRING, 4)
            oprot.writeString(self.sn.encode('utf-8') if sys.version_info[0] == 2 else self.sn)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 5)
            oprot.writeString(self.label.encode('utf-8') if sys.version_info[0] == 2 else self.label)
            oprot.writeFieldEnd()
        if self.hw_ver is not None:
            oprot.writeFieldBegin('hw_ver', TType.STRING, 6)
            oprot.writeString(self.hw_ver.encode('utf-8') if sys.version_info[0] == 2 else self.hw_ver)
            oprot.writeFieldEnd()
        if self.sw_ver is not None:
            oprot.writeFieldBegin('sw_ver', TType.STRING, 7)
            oprot.writeString(self.sw_ver.encode('utf-8') if sys.version_info[0] == 2 else self.sw_ver)
            oprot.writeFieldEnd()
        if self.mfg_date is not None:
            oprot.writeFieldBegin('mfg_date', TType.STRING, 8)
            oprot.writeString(self.mfg_date.encode('utf-8') if sys.version_info[0] == 2 else self.mfg_date)
            oprot.writeFieldEnd()
        if self.mac_addr is not None:
            oprot.writeFieldBegin('mac_addr', TType.STRING, 9)
            oprot.writeString(self.mac_addr.encode('utf-8') if sys.version_info[0] == 2 else self.mac_addr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class fan_speed(object):
    """
    Attributes:
     - front
     - behind

    """


    def __init__(self, front=None, behind=None,):
        self.front = front
        self.behind = behind

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.front = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.behind = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fan_speed')
        if self.front is not None:
            oprot.writeFieldBegin('front', TType.I32, 1)
            oprot.writeI32(self.front)
            oprot.writeFieldEnd()
        if self.behind is not None:
            oprot.writeFieldBegin('behind', TType.I32, 2)
            oprot.writeI32(self.behind)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class power_monitor(object):
    """
    Attributes:
     - vol1
     - vol2
     - vol3
     - vol4
     - vol5
     - vol6
     - vol7
     - vol8
     - vol9
     - vol10
     - vol11
     - vol12

    """


    def __init__(self, vol1=None, vol2=None, vol3=None, vol4=None, vol5=None, vol6=None, vol7=None, vol8=None, vol9=None, vol10=None, vol11=None, vol12=None,):
        self.vol1 = vol1
        self.vol2 = vol2
        self.vol3 = vol3
        self.vol4 = vol4
        self.vol5 = vol5
        self.vol6 = vol6
        self.vol7 = vol7
        self.vol8 = vol8
        self.vol9 = vol9
        self.vol10 = vol10
        self.vol11 = vol11
        self.vol12 = vol12

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.vol1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.vol2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.vol3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.vol4 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.vol5 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.vol6 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.vol7 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.vol8 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.vol9 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.vol10 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.vol11 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.vol12 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('power_monitor')
        if self.vol1 is not None:
            oprot.writeFieldBegin('vol1', TType.I32, 1)
            oprot.writeI32(self.vol1)
            oprot.writeFieldEnd()
        if self.vol2 is not None:
            oprot.writeFieldBegin('vol2', TType.I32, 2)
            oprot.writeI32(self.vol2)
            oprot.writeFieldEnd()
        if self.vol3 is not None:
            oprot.writeFieldBegin('vol3', TType.I32, 3)
            oprot.writeI32(self.vol3)
            oprot.writeFieldEnd()
        if self.vol4 is not None:
            oprot.writeFieldBegin('vol4', TType.I32, 4)
            oprot.writeI32(self.vol4)
            oprot.writeFieldEnd()
        if self.vol5 is not None:
            oprot.writeFieldBegin('vol5', TType.I32, 5)
            oprot.writeI32(self.vol5)
            oprot.writeFieldEnd()
        if self.vol6 is not None:
            oprot.writeFieldBegin('vol6', TType.I32, 6)
            oprot.writeI32(self.vol6)
            oprot.writeFieldEnd()
        if self.vol7 is not None:
            oprot.writeFieldBegin('vol7', TType.I32, 7)
            oprot.writeI32(self.vol7)
            oprot.writeFieldEnd()
        if self.vol8 is not None:
            oprot.writeFieldBegin('vol8', TType.I32, 8)
            oprot.writeI32(self.vol8)
            oprot.writeFieldEnd()
        if self.vol9 is not None:
            oprot.writeFieldBegin('vol9', TType.I32, 9)
            oprot.writeI32(self.vol9)
            oprot.writeFieldEnd()
        if self.vol10 is not None:
            oprot.writeFieldBegin('vol10', TType.I32, 10)
            oprot.writeI32(self.vol10)
            oprot.writeFieldEnd()
        if self.vol11 is not None:
            oprot.writeFieldBegin('vol11', TType.I32, 11)
            oprot.writeI32(self.vol11)
            oprot.writeFieldEnd()
        if self.vol12 is not None:
            oprot.writeFieldBegin('vol12', TType.I32, 12)
            oprot.writeI32(self.vol12)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(system_version)
system_version.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fpgaup', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'fpgadown', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'pcb', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'bom', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'devmgr', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'ucd90120', 'UTF8', None, ),  # 6
)
all_structs.append(psu_info)
psu_info.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'abs', None, None, ),  # 1
    (2, TType.I32, 'ambient_temp', None, None, ),  # 2
    (3, TType.I32, 'primary_temp', None, None, ),  # 3
    (4, TType.I32, 'secondary_temp', None, None, ),  # 4
    (5, TType.I32, 'vout', None, None, ),  # 5
    (6, TType.I32, 'vin', None, None, ),  # 6
    (7, TType.I32, 'iout', None, None, ),  # 7
    (8, TType.I32, 'iin', None, None, ),  # 8
    (9, TType.I32, 'pout', None, None, ),  # 9
    (10, TType.I32, 'pin', None, None, ),  # 10
    (11, TType.I32, 'fan', None, None, ),  # 11
    (12, TType.I32, 'capacity', None, None, ),  # 12
)
all_structs.append(periph_eeprom)
periph_eeprom.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'model_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'pn', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'sn', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'label', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'hw_ver', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'sw_ver', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'mfg_date', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'mac_addr', 'UTF8', None, ),  # 9
)
all_structs.append(fan_speed)
fan_speed.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'front', None, None, ),  # 1
    (2, TType.I32, 'behind', None, None, ),  # 2
)
all_structs.append(power_monitor)
power_monitor.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'vol1', None, None, ),  # 1
    (2, TType.I32, 'vol2', None, None, ),  # 2
    (3, TType.I32, 'vol3', None, None, ),  # 3
    (4, TType.I32, 'vol4', None, None, ),  # 4
    (5, TType.I32, 'vol5', None, None, ),  # 5
    (6, TType.I32, 'vol6', None, None, ),  # 6
    (7, TType.I32, 'vol7', None, None, ),  # 7
    (8, TType.I32, 'vol8', None, None, ),  # 8
    (9, TType.I32, 'vol9', None, None, ),  # 9
    (10, TType.I32, 'vol10', None, None, ),  # 10
    (11, TType.I32, 'vol11', None, None, ),  # 11
    (12, TType.I32, 'vol12', None, None, ),  # 12
)
fix_spec(all_structs)
del all_structs
