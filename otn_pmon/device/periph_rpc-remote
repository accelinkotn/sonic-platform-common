#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from device import periph_rpc
from device.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  system_version get_system_version()')
    print('  bool periph_presence(periph_type type, i8 id)')
    print('  string get_periph_version(periph_type type, i8 id)')
    print('  i32 get_periph_temperature(periph_type type, i8 id)')
    print('  periph_eeprom get_periph_eeprom(periph_type type, i8 id)')
    print('  ret_code initialize(periph_type type, i8 id)')
    print('  psu_info get_psu_info(i8 id)')
    print('  ret_code set_led_flash(led_type type, i8 id, led_flash_type flash_type)')
    print('  ret_code set_led_color(led_type type, i8 id, led_color color)')
    print('  reboot_type get_reboot_type()')
    print('  ret_code periph_reboot(periph_type type, i8 id, reboot_type reboot_type)')
    print('  string get_power_control_version(i8 slot_id)')
    print('  ret_code set_power_control(i8 slot_id, power_ctl_type type)')
    print('  ret_code recover_linecard_default_config(i8 id, linecard_type type)')
    print('  ret_code switch_slot_uart(i8 id)')
    print('  fan_speed get_fan_speed(i8 id)')
    print('  ret_code set_fan_speed(i8 id, i32 speed)')
    print('  ret_code sync_time_to_power_control()')
    print('  string get_fpga_version(fpga_type ftype)')
    print('  i32 get_slot_power_monitor_points_number(i8 id)')
    print('  i32 get_slot_power_monitor_point_log(i8 id, i32 total, i32 index)')
    print('  power_monitor get_fpga_up_power_monitor()')
    print('  power_monitor get_slot_power_monitor(i8 id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = periph_rpc.Client(protocol)
transport.open()

if cmd == 'get_system_version':
    if len(args) != 0:
        print('get_system_version requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_system_version())

elif cmd == 'periph_presence':
    if len(args) != 2:
        print('periph_presence requires 2 args')
        sys.exit(1)
    pp.pprint(client.periph_presence(eval(args[0]), eval(args[1]),))

elif cmd == 'get_periph_version':
    if len(args) != 2:
        print('get_periph_version requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_periph_version(eval(args[0]), eval(args[1]),))

elif cmd == 'get_periph_temperature':
    if len(args) != 2:
        print('get_periph_temperature requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_periph_temperature(eval(args[0]), eval(args[1]),))

elif cmd == 'get_periph_eeprom':
    if len(args) != 2:
        print('get_periph_eeprom requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_periph_eeprom(eval(args[0]), eval(args[1]),))

elif cmd == 'initialize':
    if len(args) != 2:
        print('initialize requires 2 args')
        sys.exit(1)
    pp.pprint(client.initialize(eval(args[0]), eval(args[1]),))

elif cmd == 'get_psu_info':
    if len(args) != 1:
        print('get_psu_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_psu_info(eval(args[0]),))

elif cmd == 'set_led_flash':
    if len(args) != 3:
        print('set_led_flash requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_led_flash(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'set_led_color':
    if len(args) != 3:
        print('set_led_color requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_led_color(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_reboot_type':
    if len(args) != 0:
        print('get_reboot_type requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_reboot_type())

elif cmd == 'periph_reboot':
    if len(args) != 3:
        print('periph_reboot requires 3 args')
        sys.exit(1)
    pp.pprint(client.periph_reboot(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_power_control_version':
    if len(args) != 1:
        print('get_power_control_version requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_power_control_version(eval(args[0]),))

elif cmd == 'set_power_control':
    if len(args) != 2:
        print('set_power_control requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_power_control(eval(args[0]), eval(args[1]),))

elif cmd == 'recover_linecard_default_config':
    if len(args) != 2:
        print('recover_linecard_default_config requires 2 args')
        sys.exit(1)
    pp.pprint(client.recover_linecard_default_config(eval(args[0]), eval(args[1]),))

elif cmd == 'switch_slot_uart':
    if len(args) != 1:
        print('switch_slot_uart requires 1 args')
        sys.exit(1)
    pp.pprint(client.switch_slot_uart(eval(args[0]),))

elif cmd == 'get_fan_speed':
    if len(args) != 1:
        print('get_fan_speed requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fan_speed(eval(args[0]),))

elif cmd == 'set_fan_speed':
    if len(args) != 2:
        print('set_fan_speed requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_fan_speed(eval(args[0]), eval(args[1]),))

elif cmd == 'sync_time_to_power_control':
    if len(args) != 0:
        print('sync_time_to_power_control requires 0 args')
        sys.exit(1)
    pp.pprint(client.sync_time_to_power_control())

elif cmd == 'get_fpga_version':
    if len(args) != 1:
        print('get_fpga_version requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_fpga_version(eval(args[0]),))

elif cmd == 'get_slot_power_monitor_points_number':
    if len(args) != 1:
        print('get_slot_power_monitor_points_number requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_slot_power_monitor_points_number(eval(args[0]),))

elif cmd == 'get_slot_power_monitor_point_log':
    if len(args) != 3:
        print('get_slot_power_monitor_point_log requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_slot_power_monitor_point_log(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_fpga_up_power_monitor':
    if len(args) != 0:
        print('get_fpga_up_power_monitor requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_fpga_up_power_monitor())

elif cmd == 'get_slot_power_monitor':
    if len(args) != 1:
        print('get_slot_power_monitor requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_slot_power_monitor(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
